name: Check package flow

on:
  workflow_call:
    inputs:
      actions-ref:
        description: "Version of actions, normally the same as workflow"
        required: true
        type: string
      artifact-name:
        description: "Unique name for collecting artifacts, it shall be unique for all workflows"
        required: true
        type: string
      install-extras:
        description: "optional extras which are needed to include also []"
        required: false
        type: string
        default: ""
      install-flags:
        description: "Additional pip install flags"
        required: false
        type: string
        default: "-f https://download.pytorch.org/whl/cpu/torch_stable.html"
      import-name:
        description: "Import name to test with after installation"
        required: true
        type: string
      custom-import-code:
        description: "additional import statement, need to be full python code"
        type: string
        required: false
        default: ""
      build-matrix:
        description: "what building configs in json format, expected keys are `os` and `python-version`"
        required: false
        type: string
        default: |
          {
            "os": ["ubuntu-latest"],
          }
      testing-matrix:
        description: "what test configs to run in json format, expected keys are `os` and `python-version`"
        required: false
        type: string
        # default operating systems should be pinned to specific versions instead of "-latest" for stability
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        default: |
          {
            "os": ["ubuntu-22.04", "macos-13", "windows-2022"],
            "python-version": ["3.9", "3.13"]
          }
      env-vars:
        description: "custom environment variables in json format"
        required: false
        type: string
        default: |
          {
            "SAMPLE_ENV_VARIABLE": 1,
          }
      timeout-minutes:
        description: "timeout-minutes for each install job"
        required: false
        type: number
        default: 30

defaults:
  run:
    shell: bash

jobs:
  pkg-build:
    runs-on: ${{ matrix.os }}
    env: ${{ fromJSON(inputs.env-vars) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.build-matrix) }}
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # checkout entire history for all branches (required when using scm-based versioning)
          submodules: recursive
      - name: Set up Python üêç
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version || '3.x' }}

      - name: Pull reusable ü§ñ actionsÔ∏è
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.actions-ref }}
          path: .cicd
          repository: Lightning-AI/utilities
      - name: Prepare build env.
        run: |
          pip install -q -r ./.cicd/requirements/gha-package.txt
          pip list
      - name: Create package üì¶
        uses: ./.cicd/.github/actions/pkg-create
      - name: Upload üì§ packages
        if: ${{ inputs.artifact-name != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}-build-${{ strategy.job-index }}
          path: dist

  merge-artifacts:
    needs: pkg-build
    runs-on: ubuntu-latest
    steps:
      - name: Pull reusable ü§ñ actionsÔ∏è
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.actions-ref }}
          path: .cicd
          repository: Lightning-AI/utilities
      - name: Prepare build env.
        run: |
          pip install -q -r ./.cicd/requirements/gha-package.txt
          pip list

      - name: Download üì•
        uses: actions/download-artifact@v4
        with:
          # download all build artifacts
          pattern: ${{ inputs.artifact-name }}-build-*
          merge-multiple: true
          path: dist
      - name: Brief look
        run: |
          ls -lh dist/
          twine check dist/*
      - name: Upload üì§
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: dist

  pkg-check:
    needs: merge-artifacts
    runs-on: ${{ matrix.os }}
    env: ${{ fromJSON(inputs.env-vars) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.testing-matrix) }}
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python üêç ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version || '3.x' }}

      - name: Pull reusable ü§ñ actionsÔ∏è
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.actions-ref }}
          path: .cicd
          repository: Lightning-AI/utilities
      - name: Download üì• all packages
        if: ${{ inputs.artifact-name != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: pypi
      - name: Installing package üì¶ as Archive
        timeout-minutes: ${{ inputs.timeout-minutes }}
        uses: ./.cicd/.github/actions/pkg-install
        with:
          install-from: "archive"
          pkg-extras: ${{ inputs.install-extras }}
          pip-flags: ${{ inputs.install-flags }}
          import-name: ${{ inputs.import-name }}
          custom-import-code: ${{ inputs.custom-import-code }}
      - name: Installing package üì¶ as Wheel
        timeout-minutes: ${{ inputs.timeout-minutes }}
        uses: ./.cicd/.github/actions/pkg-install
        with:
          install-from: "wheel"
          pkg-extras: ${{ inputs.install-extras }}
          pip-flags: ${{ inputs.install-flags }}
          import-name: ${{ inputs.import-name }}
          custom-import-code: ${{ inputs.custom-import-code }}

  # TODO: add run doctests

  pkg-guardian:
    runs-on: ubuntu-latest
    needs: pkg-check
    if: always()
    steps:
      - run: echo "${{ needs.pkg-check.result }}"
      - name: failing...
        if: needs.pkg-check.result == 'failure'
        run: exit 1
      - name: cancelled or skipped...
        if: contains(fromJSON('["cancelled", "skipped"]'), needs.pkg-check.result)
        timeout-minutes: 1
        run: sleep 90
