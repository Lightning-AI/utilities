name: Install and check package
description: installing and validation the package

inputs:
  install-from:
    description: "Define if the package is from archive or wheel"
    required: true
  pkg-folder:
    description: "Unique name for collecting artifacts"
    required: false
    default: "pypi"
  pkg-extras:
    description: "optional extras which are needed to include also []"
    required: false
    default: ""
  pip-flags:
    description: "additional pip install flags"
    required: false
    default: "-f https://download.pytorch.org/whl/cpu/torch_stable.html"
  import-name:
    description: "Import name to test with after installation"
    required: true
  custom-import-code:
    description: "additional import statement, need to be full python code"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: show packages
      working-directory: ${{ inputs.pkg-folder }}
      run: |
        ls -lh
        pip -V
        echo "PKG_WHEEL=$(ls *.whl | head -n1)" >> $GITHUB_ENV
        echo "PKG_SOURCE=$(ls *.tar.gz | head -n1)" >> $GITHUB_ENV
        pip list
      shell: bash

    - name: Install package (archive)
      if: ${{ inputs.install-from == 'archive' }}
      working-directory: pypi/
      run: |
        set -ex
        pip install '${{ env.PKG_SOURCE }}${{ inputs.pkg-extras }}' \
          --force-reinstall ${{ inputs.pip-flags }}
        pip list
      shell: bash

    - name: Install package (wheel)
      if: ${{ inputs.install-from == 'wheel' }}
      working-directory: ${{ inputs.pkg-folder }}
      run: |
        set -ex
        pip install '${{ env.PKG_WHEEL }}${{ inputs.pkg-extras }}' \
          --force-reinstall ${{ inputs.pip-flags }}
        pip list
      shell: bash

    - name: package check / import
      if: ${{ inputs.import-name != '' }}
      run: |
        python -c "import ${{ inputs.import-name }} as pkg; print(f'version: {pkg.__version__}')"
      shell: bash

    - name: package check / custom import
      if: ${{ inputs.custom-import-code != '' }}
      run: |
        python -c '${{ inputs.custom-import-code }}'
      shell: bash

    - name: Uninstall all
      # TODO: reset env / consider add as conda
      run: |
        pip freeze > _reqs.txt
        pip uninstall -y -r _reqs.txt
      shell: bash
